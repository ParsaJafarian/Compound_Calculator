package com.compound_calculator.form;

import com.compound_calculator.Row;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.*;

public class PresentValueForm extends Form {
    private final TextField paymentAmountField, interestRateField, nbYearsField;
    private final ComboBox<String> paymentIntervalBox;
    private double presentValue, lostToInflation;

    public PresentValueForm() {
        super();
        //instantiating all the labels and fields that comprise this form
        Label paymentAmountLbl = new Label("Payment amount ($)");
        paymentAmountField = new TextField();
        Label interestRateLbl = new Label("Inflation rate (%)");
        interestRateField = new TextField();
        Label nbYearsLbl = new Label("Number of years");
        nbYearsField = new TextField();
        paymentIntervalBox = new ComboBox<>();
        paymentIntervalBox.getItems().addAll("Yearly", "Biannually", "Quarterly", "Monthly");
        paymentIntervalBox.getSelectionModel().selectFirst();
        //adding them to the GridPane that this form extends
        this.add(paymentAmountLbl, 0, 0);
        this.add(paymentAmountField, 1, 0);
        this.add(interestRateLbl, 0, 1);
        this.add(interestRateField, 1, 1);
        this.add(nbYearsLbl, 0, 2);
        this.add(nbYearsField, 1, 2);
        //adding the textFields to the fields arrayList to make the numeric
        fields.add(paymentAmountField);
        fields.add(interestRateField);
        fields.add(nbYearsField);

        makeTextFieldsNumeric();
    }


    public void clear() {
        paymentIntervalBox.getSelectionModel().selectFirst();
        paymentAmountField.setText("");
        interestRateField.setText("");
        nbYearsField.setText("");
    }

    @Override
    public boolean validFields() {
        //all fields must be filled out to allow for the calculation
        return !paymentAmountField.getText().isEmpty() && !interestRateField.getText().isEmpty() && !nbYearsField.getText().isEmpty();
    }

    @Override
    public ObservableList<Row> getData() {
        //If the input is invalid, display an error message and stop the calculation process
        if (!this.validFields()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("Invalid input");
            alert.setContentText("Please fill in all fields");
            alert.showAndWait();
            return null;
        }

        int nbYears = (int) Double.parseDouble(nbYearsField.getText());
        double annuityPayment = Double.parseDouble(paymentAmountField.getText());
        double yieldToMaturity = Double.parseDouble(interestRateField.getText());

        //returning the data that is generated by the computePresentValueAnnuity() fct
        return computePresentValueAnnuity(nbYears, annuityPayment, yieldToMaturity);
    }

    private ObservableList<Row> computePresentValueAnnuity(int n, double pMT, double rPercent) {
        /*
            this is the formula:
            P= SUM(pMT/(1+r)^n)
            where:
            P= present value of annuity
            pMT= dollar amount each annuity payment
            r= discount/interest rate (in decimal form)
            n= number of periods in which the payments will be made
         */
        ObservableList<Row> data = FXCollections.observableArrayList();
        double rDecimal = rPercent / 100.0d;
        //total without inflation is what the money would be worth in a world where inflation is 0.0%
        double totalWithOutInflation = pMT * n;

        double totalValue = 0;
        data.add(new Row(0, 0));
        for (int i = 1; i <= n; i ++) {
            double presentValue = pMT / Math.pow(1 + rDecimal, i);
            totalValue += presentValue;
            data.add(new Row(i, totalValue));
        }
        this.presentValue = totalValue;
        //money lost to inflation is the difference between the theoretical capital from the world with 0 inflation and the real world
        //in which the inflation is given in the form
        this.lostToInflation = totalWithOutInflation - totalValue;
        return data;
    }

    public double getPresentValue() {
        return this.presentValue;
    }

    public double getLostToInflation() {
        return lostToInflation;
    }

    public static void displayInformationAlert() {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Present Value");
        alert.setHeaderText("How it works");
        alert.setContentText("Present value is an economic concept that reflects the current worth of a sum of" +
                " money or a series of future cash flows, taking into account the time value of money." +
                " It recognizes that a given amount of money today is more valuable than the same" +
                " amount in the future due to the potential for earning returns or interest." +
                " To learn more, visit https://www.investopedia.com/terms/p/presentvalue.asp");
        alert.showAndWait();
    }

    @Override
    public String toString() {
        //for the culture!
        return "presentValueForm!";
    }

}
